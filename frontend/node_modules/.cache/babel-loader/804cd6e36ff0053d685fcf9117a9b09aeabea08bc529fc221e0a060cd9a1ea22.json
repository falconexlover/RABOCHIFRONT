{"ast":null,"code":"import axios from 'axios';\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\nconst api = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Перехватчик запросов для добавления токена\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => Promise.reject(error));\n\n// Перехватчик ответов для обработки ошибок\napi.interceptors.response.use(response => response, error => {\n  // Если ошибка авторизации (токен истек), разлогиниваем пользователя\n  if (error.response && error.response.status === 401) {\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n    window.location.href = '/login';\n  }\n  return Promise.reject(error);\n});\n\n// Сервисы для работы с API\nconst authService = {\n  register: userData => api.post('/auth/register', userData),\n  login: credentials => api.post('/auth/login', credentials),\n  getProfile: () => api.get('/auth/profile'),\n  updateProfile: userData => api.put('/auth/profile', userData),\n  changePassword: passwords => api.put('/auth/change-password', passwords)\n};\nconst roomService = {\n  getRooms: () => api.get('/rooms'),\n  getRoomById: id => api.get(`/rooms/${id}`),\n  getAvailableRooms: params => api.get('/rooms/available', {\n    params\n  }),\n  createRoom: roomData => api.post('/rooms', roomData),\n  updateRoom: (id, roomData) => api.put(`/rooms/${id}`, roomData),\n  deleteRoom: id => api.delete(`/rooms/${id}`)\n};\nconst bookingService = {\n  createBooking: bookingData => api.post('/bookings', bookingData),\n  getUserBookings: () => api.get('/bookings'),\n  getBookingById: id => api.get(`/bookings/${id}`),\n  cancelBooking: id => api.put(`/bookings/cancel/${id}`),\n  getAllBookings: () => api.get('/bookings/admin/all'),\n  updateBookingStatus: (id, status) => api.put(`/bookings/admin/status/${id}`, {\n    status\n  })\n};\nconst customerService = {\n  getAllCustomers: () => api.get('/customers'),\n  searchCustomers: query => api.get('/customers/search', {\n    params: {\n      query\n    }\n  }),\n  getCustomerById: id => api.get(`/customers/${id}`),\n  getCustomerStats: id => api.get(`/customers/${id}/stats`)\n};\nconst analyticsService = {\n  getOverallStats: () => api.get('/analytics/overall'),\n  getStatsByPeriod: (startDate, endDate) => api.get('/analytics/period', {\n    params: {\n      startDate,\n      endDate\n    }\n  }),\n  getOccupancyForecast: days => api.get('/analytics/forecast', {\n    params: {\n      days\n    }\n  }),\n  getPopularRooms: limit => api.get('/analytics/popular-rooms', {\n    params: {\n      limit\n    }\n  })\n};\nexport { api, authService, roomService, bookingService, customerService, analyticsService };","map":{"version":3,"names":["axios","API_URL","process","env","REACT_APP_API_URL","api","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","response","status","removeItem","window","location","href","authService","register","userData","post","login","credentials","getProfile","get","updateProfile","put","changePassword","passwords","roomService","getRooms","getRoomById","id","getAvailableRooms","params","createRoom","roomData","updateRoom","deleteRoom","delete","bookingService","createBooking","bookingData","getUserBookings","getBookingById","cancelBooking","getAllBookings","updateBookingStatus","customerService","getAllCustomers","searchCustomers","query","getCustomerById","getCustomerStats","analyticsService","getOverallStats","getStatsByPeriod","startDate","endDate","getOccupancyForecast","days","getPopularRooms","limit"],"sources":["/home/falconexlover/desk/lesnoy dvorik/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\n\nconst api = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Перехватчик запросов для добавления токена\napi.interceptors.request.use(\n  config => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n    return config;\n  },\n  error => Promise.reject(error)\n);\n\n// Перехватчик ответов для обработки ошибок\napi.interceptors.response.use(\n  response => response,\n  error => {\n    // Если ошибка авторизации (токен истек), разлогиниваем пользователя\n    if (error.response && error.response.status === 401) {\n      localStorage.removeItem('token');\n      localStorage.removeItem('user');\n      window.location.href = '/login';\n    }\n    return Promise.reject(error);\n  }\n);\n\n// Сервисы для работы с API\nconst authService = {\n  register: (userData) => api.post('/auth/register', userData),\n  login: (credentials) => api.post('/auth/login', credentials),\n  getProfile: () => api.get('/auth/profile'),\n  updateProfile: (userData) => api.put('/auth/profile', userData),\n  changePassword: (passwords) => api.put('/auth/change-password', passwords)\n};\n\nconst roomService = {\n  getRooms: () => api.get('/rooms'),\n  getRoomById: (id) => api.get(`/rooms/${id}`),\n  getAvailableRooms: (params) => api.get('/rooms/available', { params }),\n  createRoom: (roomData) => api.post('/rooms', roomData),\n  updateRoom: (id, roomData) => api.put(`/rooms/${id}`, roomData),\n  deleteRoom: (id) => api.delete(`/rooms/${id}`)\n};\n\nconst bookingService = {\n  createBooking: (bookingData) => api.post('/bookings', bookingData),\n  getUserBookings: () => api.get('/bookings'),\n  getBookingById: (id) => api.get(`/bookings/${id}`),\n  cancelBooking: (id) => api.put(`/bookings/cancel/${id}`),\n  getAllBookings: () => api.get('/bookings/admin/all'),\n  updateBookingStatus: (id, status) => api.put(`/bookings/admin/status/${id}`, { status })\n};\n\nconst customerService = {\n  getAllCustomers: () => api.get('/customers'),\n  searchCustomers: (query) => api.get('/customers/search', { params: { query } }),\n  getCustomerById: (id) => api.get(`/customers/${id}`),\n  getCustomerStats: (id) => api.get(`/customers/${id}/stats`)\n};\n\nconst analyticsService = {\n  getOverallStats: () => api.get('/analytics/overall'),\n  getStatsByPeriod: (startDate, endDate) => api.get('/analytics/period', { \n    params: { startDate, endDate } \n  }),\n  getOccupancyForecast: (days) => api.get('/analytics/forecast', { \n    params: { days } \n  }),\n  getPopularRooms: (limit) => api.get('/analytics/popular-rooms', { \n    params: { limit } \n  })\n};\n\nexport {\n  api,\n  authService,\n  roomService,\n  bookingService,\n  customerService,\n  analyticsService\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}