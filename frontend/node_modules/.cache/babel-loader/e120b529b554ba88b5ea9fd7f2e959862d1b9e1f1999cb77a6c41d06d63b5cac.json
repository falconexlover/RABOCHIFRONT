{"ast":null,"code":"import axios from'axios';const API_URL=process.env.REACT_APP_API_URL||'http://localhost:5000/api';const api=axios.create({baseURL:API_URL,headers:{'Content-Type':'application/json'}});// Перехватчик запросов для добавления токена\napi.interceptors.request.use(config=>{const token=localStorage.getItem('token');if(token){config.headers.Authorization=`Bearer ${token}`;}return config;},error=>Promise.reject(error));// Перехватчик ответов для обработки ошибок\napi.interceptors.response.use(response=>response,error=>{// Если ошибка авторизации (токен истек), разлогиниваем пользователя\nif(error.response&&error.response.status===401){localStorage.removeItem('token');localStorage.removeItem('user');window.location.href='/login';}return Promise.reject(error);});// Сервисы для работы с API\nconst authService={register:userData=>api.post('/auth/register',userData),login:credentials=>api.post('/auth/login',credentials),getProfile:()=>api.get('/auth/profile'),updateProfile:userData=>api.put('/auth/profile',userData),changePassword:passwords=>api.put('/auth/change-password',passwords)};const roomService={getRooms:()=>api.get('/rooms'),getRoomById:id=>api.get(`/rooms/${id}`),getAvailableRooms:params=>api.get('/rooms/available',{params}),createRoom:roomData=>api.post('/rooms',roomData),updateRoom:(id,roomData)=>api.put(`/rooms/${id}`,roomData),deleteRoom:id=>api.delete(`/rooms/${id}`)};const bookingService={createBooking:bookingData=>api.post('/bookings',bookingData),getUserBookings:()=>api.get('/bookings'),getBookingById:id=>api.get(`/bookings/${id}`),cancelBooking:id=>api.put(`/bookings/cancel/${id}`),getAllBookings:()=>api.get('/bookings/admin/all'),updateBookingStatus:(id,status)=>api.put(`/bookings/admin/status/${id}`,{status})};const customerService={getAllCustomers:()=>api.get('/customers'),searchCustomers:query=>api.get('/customers/search',{params:{query}}),getCustomerById:id=>api.get(`/customers/${id}`),getCustomerStats:id=>api.get(`/customers/${id}/stats`)};const analyticsService={getOverallStats:()=>api.get('/analytics/overall'),getStatsByPeriod:(startDate,endDate)=>api.get('/analytics/period',{params:{startDate,endDate}}),getOccupancyForecast:days=>api.get('/analytics/forecast',{params:{days}}),getPopularRooms:limit=>api.get('/analytics/popular-rooms',{params:{limit}})};export{api,authService,roomService,bookingService,customerService,analyticsService};","map":{"version":3,"names":["axios","API_URL","process","env","REACT_APP_API_URL","api","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","response","status","removeItem","window","location","href","authService","register","userData","post","login","credentials","getProfile","get","updateProfile","put","changePassword","passwords","roomService","getRooms","getRoomById","id","getAvailableRooms","params","createRoom","roomData","updateRoom","deleteRoom","delete","bookingService","createBooking","bookingData","getUserBookings","getBookingById","cancelBooking","getAllBookings","updateBookingStatus","customerService","getAllCustomers","searchCustomers","query","getCustomerById","getCustomerStats","analyticsService","getOverallStats","getStatsByPeriod","startDate","endDate","getOccupancyForecast","days","getPopularRooms","limit"],"sources":["/home/falconexlover/desk/lesnoy dvorik/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\n\nconst api = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Перехватчик запросов для добавления токена\napi.interceptors.request.use(\n  config => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n    return config;\n  },\n  error => Promise.reject(error)\n);\n\n// Перехватчик ответов для обработки ошибок\napi.interceptors.response.use(\n  response => response,\n  error => {\n    // Если ошибка авторизации (токен истек), разлогиниваем пользователя\n    if (error.response && error.response.status === 401) {\n      localStorage.removeItem('token');\n      localStorage.removeItem('user');\n      window.location.href = '/login';\n    }\n    return Promise.reject(error);\n  }\n);\n\n// Сервисы для работы с API\nconst authService = {\n  register: (userData) => api.post('/auth/register', userData),\n  login: (credentials) => api.post('/auth/login', credentials),\n  getProfile: () => api.get('/auth/profile'),\n  updateProfile: (userData) => api.put('/auth/profile', userData),\n  changePassword: (passwords) => api.put('/auth/change-password', passwords)\n};\n\nconst roomService = {\n  getRooms: () => api.get('/rooms'),\n  getRoomById: (id) => api.get(`/rooms/${id}`),\n  getAvailableRooms: (params) => api.get('/rooms/available', { params }),\n  createRoom: (roomData) => api.post('/rooms', roomData),\n  updateRoom: (id, roomData) => api.put(`/rooms/${id}`, roomData),\n  deleteRoom: (id) => api.delete(`/rooms/${id}`)\n};\n\nconst bookingService = {\n  createBooking: (bookingData) => api.post('/bookings', bookingData),\n  getUserBookings: () => api.get('/bookings'),\n  getBookingById: (id) => api.get(`/bookings/${id}`),\n  cancelBooking: (id) => api.put(`/bookings/cancel/${id}`),\n  getAllBookings: () => api.get('/bookings/admin/all'),\n  updateBookingStatus: (id, status) => api.put(`/bookings/admin/status/${id}`, { status })\n};\n\nconst customerService = {\n  getAllCustomers: () => api.get('/customers'),\n  searchCustomers: (query) => api.get('/customers/search', { params: { query } }),\n  getCustomerById: (id) => api.get(`/customers/${id}`),\n  getCustomerStats: (id) => api.get(`/customers/${id}/stats`)\n};\n\nconst analyticsService = {\n  getOverallStats: () => api.get('/analytics/overall'),\n  getStatsByPeriod: (startDate, endDate) => api.get('/analytics/period', { \n    params: { startDate, endDate } \n  }),\n  getOccupancyForecast: (days) => api.get('/analytics/forecast', { \n    params: { days } \n  }),\n  getPopularRooms: (limit) => api.get('/analytics/popular-rooms', { \n    params: { limit } \n  })\n};\n\nexport {\n  api,\n  authService,\n  roomService,\n  bookingService,\n  customerService,\n  analyticsService\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}